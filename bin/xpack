#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# This file is part of the XPack Package Generator
# Copyright (C) 2010-2011, Tobias Koch <tobias.koch@gmail.com>
#
# XPack is licensed under the GNU General Public License, version 2. A copy of
# the license text can be found in the file LICENSE included in the source distribution.
#

# make xpack relocatable
INSTALL_DIR = File.expand_path(File.dirname(File.symlink?(__FILE__) ?
  File.readlink(__FILE__) : __FILE__) + '/..')
$LOAD_PATH.unshift INSTALL_DIR + '/lib'

require 'getoptlong'
require 'packagecontrol'

XPACK_VERSION = "0.1.0"

XPACK_ERR_INVOCATION = 1
XPACK_ERR_INTERRUPT  = 2
XPACK_ERR_RUNTIME    = 3

def print_usage()
  puts "XPack Package Generator, version #{XPACK_VERSION}                             "
  puts "Copyright (C) 2010-2012, Tobias Koch <tobias.koch@gmail.com>                  "
  puts "                                                                              "
  puts "Usage: xpack [OPTIONS] <specfile>                                             "
  puts "                                                                              "
  puts "Options:                                                                      "
  puts "                                                                              "
  puts " -h --help          print this help message                                   "
  puts "                                                                              "
  puts " --list-deps        list all build dependencies                               "
  puts " --ignore-deps      ignore missing build dependencies                         "
  puts " --no-debug-pkgs    don't generate debug packages                             "
  puts "                                                                              "
  puts " -f --format=<fmt>  package format to build, currently supported formats are: "
  puts "                    'deb' - Debian package format                             "
  puts " -o --outdir=<dir>  place resulting binary packages in this directory         "
  puts "                                                                              "
  puts " -u --unpack        unpack and patch the sources                              "
  puts " -p --prepare       run the prepare target defined in the rules file          "
  puts " -b --build         run the build target defined in the rules file            "
  puts " -i --install       run the install target defined in the rules file          "
  puts " -r --repackage     run the install target and generate binary packages       "
  puts " -c --clean         run the clean target                                      "
  puts "                                                                              "
  puts " --source-dir=<dir> overrides the package source dir set by the maintainer    "
  puts "                                                                              "
  puts " --debianize        create 'debian' folder allowing package to be assembled   "
  puts "                    with dpkg-buildpackage on a Debian-based system           "
  puts "                                                                              "
end

def parse_cmd_line()

  # define default configuration
  config = {
    :action => :default,
    :outdir => nil,
    :format => :deb,
    :ignore_deps => false,
    :debug_pkgs => true
  }

  opts = GetoptLong.new(
    [ '--help', '-h',      GetoptLong::NO_ARGUMENT ],
    [ '--list-deps',       GetoptLong::NO_ARGUMENT ],
    [ '--ignore-deps',     GetoptLong::NO_ARGUMENT ],
    [ '--no-debug-pkgs',   GetoptLong::NO_ARGUMENT ],
    [ '--format', '-f',    GetoptLong::REQUIRED_ARGUMENT ],
    [ '--outdir', '-o',    GetoptLong::REQUIRED_ARGUMENT ],
    [ '--unpack', '-u',    GetoptLong::NO_ARGUMENT ],
    [ '--prepare', '-p',   GetoptLong::NO_ARGUMENT ],
    [ '--build', '-b',     GetoptLong::NO_ARGUMENT ],
    [ '--install', '-i',   GetoptLong::NO_ARGUMENT ],
    [ '--repackage', '-r', GetoptLong::NO_ARGUMENT ],
    [ '--clean', '-c',     GetoptLong::NO_ARGUMENT ],
    [ '--source-dir',      GetoptLong::REQUIRED_ARGUMENT ],
    [ '--debianize',       GetoptLong::NO_ARGUMENT ]
  )

  opts.quiet = true
  begin
    opts.each do |opt, arg|
      case opt
        when '--help'
          print_usage
          exit 0
        when '--list-deps'
          config[:action] = :list_deps
        when '--ignore-deps'
          config[:ignore_deps] = true
        when '--no-debug-pkgs'
          config[:debug_pkgs] = false
        when '--format'
          if not [:deb].include? arg.intern
            raise GetoptLong::Error, "invalid binary package format '#{arg}'"
          end
          config[:format] = arg.intern
        when '--outdir'
          if not File.directory? arg
            raise GetoptLong::Error, "no such directory '#{arg}'"
          elsif not File.writable? arg
            raise GetoptLong::Error, "directory '#{arg}' is not writable"
          end
          config[:outdir] = arg
        when '--unpack'
          config[:action] = :unpack
        when '--prepare'
          config[:action] = :prepare
        when '--build'
          config[:action] = :build
        when '--install'
          config[:action] = :install
        when '--repackage'
          config[:action] = :repackage
        when '--clean'
          config[:action] = :clean
        when '--source-dir'
          config[:sourcedir] = arg
        when '--debianize'
          config[:action] = :debianize
      end
    end
  rescue GetoptLong::Error => e
    $stderr.write "xpack: #{e.message}\n"
    exit XPACK_ERR_INVOCATION
  end

  return config
end

begin #main()

  config = parse_cmd_line

  if ARGV.length != 1
    $stderr.write "xpack: missing spec file argument\n"
    exit XPACK_ERR_INVOCATION
  end

  xml_spec_file_name = ARGV[0]

  unless File.file? xml_spec_file_name
    $stderr.write "xpack: no such file '#{xml_spec_file_name}'\n"
    exit XPACK_ERR_INVOCATION
  end

  begin
    pkg_ctrl = PackageControl.new(xml_spec_file_name, config)
    pkg_ctrl.call(config[:action])
  rescue Interrupt => e
    $stderr.write "xpack: caught interrupt, exiting\n"
    exit XPACK_ERR_INTERRUPT
  rescue Exception => e
    $stderr.write "xpack: #{e.message}\n"
    exit XPACK_ERR_RUNTIME
  end

end
